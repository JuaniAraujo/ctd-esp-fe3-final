{"ast":null,"code":"var _jsxFileName = \"D:\\\\CTD\\\\FrontEnd3\\\\Final_Libre_Front3_Async\\\\fe3-final\\\\src\\\\Routes\\\\Detail.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppContext } from '../Context/AppContext';\n/* Este componente debera ser estilado como \"dark\"\r\n o \"light\" dependiendo del theme del Context */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Detail = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const [dentist, setDentist] = useState(null);\n  /*  Consumiendo el parametro dinamico de la URL deberan\r\n   hacer un fetch a un user en especifico */\n\n  useEffect(() => {\n    /* Aquí debes realizar la llamada a la API para obtener la información\r\n    del dentista específico. Puedes usar fetch o axios, y luego actualizar\r\n    el estado con dispatch({ type: 'SET_DENTISTS', payload: data }); */\n    const fetchDentistDetails = async () => {\n      try {\n        // Obtén el ID del parámetro de la URL\n        const dentistId = match.params.id; // Realiza la solicitud a la API para obtener detalles del dentista específico\n\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${dentistId}`);\n        const data = await response.json(); // Actualiza el estado con la información del dentista\n\n        setDentist(data);\n      } catch (error) {\n        console.error('Error fetching dentist details:', error);\n      }\n    }; // Llama a la función de solicitud cuando el componente se monta\n\n\n    fetchDentistDetails();\n  }, [match.params.id]); // Te asegurás de que se vuelva a llamar si cambia el ID en la URL\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Detail Dentist id \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), dentist && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", dentist.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", dentist.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Phone: \", dentist.phone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Website: \", dentist.website]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Detail, \"YLVtVtR5WGlp422ssWLrLoU59no=\");\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useParams","useAppContext","Detail","match","dentist","setDentist","fetchDentistDetails","dentistId","params","id","response","fetch","data","json","error","console","name","email","phone","website"],"sources":["D:/CTD/FrontEnd3/Final_Libre_Front3_Async/fe3-final/src/Routes/Detail.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useAppContext } from '../Context/AppContext';\r\n\r\n/* Este componente debera ser estilado como \"dark\"\r\n o \"light\" dependiendo del theme del Context */\r\n\r\n const Detail = ({ match }) => {\r\n\r\n  const [dentist, setDentist] = useState(null);\r\n \r\n  /*  Consumiendo el parametro dinamico de la URL deberan\r\n   hacer un fetch a un user en especifico */\r\n\r\n   useEffect(() => {\r\n    /* Aquí debes realizar la llamada a la API para obtener la información\r\n    del dentista específico. Puedes usar fetch o axios, y luego actualizar\r\n    el estado con dispatch({ type: 'SET_DENTISTS', payload: data }); */\r\n  \r\n    const fetchDentistDetails = async () => {\r\n      try {\r\n        // Obtén el ID del parámetro de la URL\r\n        const dentistId = match.params.id;\r\n\r\n        // Realiza la solicitud a la API para obtener detalles del dentista específico\r\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${dentistId}`);\r\n        const data = await response.json();\r\n\r\n        // Actualiza el estado con la información del dentista\r\n        setDentist(data);\r\n      } catch (error) {\r\n        console.error('Error fetching dentist details:', error);\r\n      }\r\n    };\r\n\r\n    // Llama a la función de solicitud cuando el componente se monta\r\n    fetchDentistDetails();\r\n  }, [match.params.id]); // Te asegurás de que se vuelva a llamar si cambia el ID en la URL\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>Detail Dentist id </h1>\r\n      {/* aqui deberan renderizar la informacion en detalle de un user\r\n      en especifico. Deberan mostrar el name - email - phone - website\r\n      por cada user en especifico: */}\r\n      {dentist && (\r\n        <div>\r\n          <p>Name: {dentist.name}</p>\r\n          <p>Email: {dentist.email}</p>\r\n          <p>Phone: {dentist.phone}</p>\r\n          <p>Website: {dentist.website}</p>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Detail"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA;AACA;;;;;AAEC,MAAMC,MAAM,GAAG,QAAe;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAE7B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;EAEA;AACF;;EAEGD,SAAS,CAAC,MAAM;IACf;AACJ;AACA;IAEI,MAAMQ,mBAAmB,GAAG,YAAY;MACtC,IAAI;QACF;QACA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAN,CAAaC,EAA/B,CAFE,CAIF;;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAA6CJ,SAAU,EAAzD,CAA5B;QACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CANE,CAQF;;QACAR,UAAU,CAACO,IAAD,CAAV;MACD,CAVD,CAUE,OAAOE,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,iCAAd,EAAiDA,KAAjD;MACD;IACF,CAdD,CALe,CAqBf;;;IACAR,mBAAmB;EACpB,CAvBS,EAuBP,CAACH,KAAK,CAACK,MAAN,CAAaC,EAAd,CAvBO,CAAT,CAP4B,CA8BN;;EAGvB,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAKGL,OAAO,iBACN;MAAA,wBACE;QAAA,qBAAUA,OAAO,CAACY,IAAlB;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,sBAAWZ,OAAO,CAACa,KAAnB;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,sBAAWb,OAAO,CAACc,KAAnB;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE;QAAA,wBAAad,OAAO,CAACe,OAArB;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA,QANJ;EAAA,gBADF;AAgBD,CAjDA;;GAAMjB,M;;KAAAA,M;AAmDP,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}